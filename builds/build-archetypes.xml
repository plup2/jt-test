<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="maven-deploys" name="gocwebtemplate-archetype-build">
<!-- 
        This Ant script is used to produce (and deploy to Maven repo) Maven
        Archetypes corresponding to the sample projects.
-->


    <property environment="env"/>
    
    <property name="package.targetdir" value="./target" />
    <property file="./build.properties" />

	<condition property="isWindows">
	    <os family="windows" />
	</condition>
	<condition property="isUnix">
	    <os family="unix" />
	</condition>

    <macrodef name="create-archetype-project">
        <attribute name="project-name"/>
        <sequential>
            <echo message="Creating Maven project for archetype of [@{project-name}]" />

            <mkdir dir="${package.targetdir}/@{project-name}-archetype" />
            
            <!-- Copy archetype skeleton -->
            <copy file="./@{project-name}-archetype/pom.xml" todir="${package.targetdir}/@{project-name}-archetype" 
                  overwrite="true" verbose="true">
                  <filterset filtersfile="./build.properties" />
            </copy>
            <copy todir="${package.targetdir}/@{project-name}-archetype" 
                  overwrite="true" verbose="true" filtering="false">
                  <fileset dir="./@{project-name}-archetype/src/.." includes="src/**" />
            </copy>

            <!-- Copy "actual" project files -->
            <copy todir="${package.targetdir}/@{project-name}-archetype/src/main/resources/archetype-resources" 
                  overwrite="true" verbose="false" filtering="false">
                  <fileset dir="../@{project-name}/src/.." includes="src/**" />
            </copy>
            <xslt in="../@{project-name}/pom.xml" 
                  out="${package.targetdir}/@{project-name}-archetype/src/main/resources/archetype-resources/pom.xml"
                  style="./build-archetype-pom.xslt"
                  force="true">
                <param name="gocwebtemplate.build.version" expression="${gocwebtemplate.build.version}"/>
            </xslt>
        </sequential>
    </macrodef>
    
    <target name="mvn_windows_setup" if="isWindows">
        <property name="mvn.executable" value="cmd" />
        <property name="mvn.args" value="/c" />
        <property name="mvn.path" value="" />
	    <property name="mvn.defs" value="--settings ${basedir}/maven-config/settings.xml --batch-mode --errors --update-snapshots" />
    </target>
    <target name="mvn_unix_setup" if="isUnix">
        <property name="mvn.executable" value="sh" />
        <property name="mvn.args" value="-c" />
        <property name="mvn.path" value="/u01/app/maven/bin/" />
	<!--NOTE: Jenkins build needs the following defined in command line because the mvn command somehow
		  ignores server configuration (ie MAVEN_OPTS environment variable) when we execute it. 
		  So, at the very least for now, we must have this server-specific value here.
		  If running this scripts yields errors from Maven complaning about 
		  "java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty"
		  it probably means this path is wrong.  -->
	    <property name="mvn.defs" value="-Djavax.net.ssl.trustStore=/u01/certs/custom_cacerts.jks" />
    </target>
    <target name="run-mvn-goals" depends="mvn_windows_setup, mvn_unix_setup">
        <echo message="Executing Maven from [${p_exec_basedir}] with arguments [${p_goals}]..." />
        <echo message="${mvn.args} 'mvn ${mvn.defs} ${p_goals}'" />
        <exec dir="${p_exec_basedir}" executable="${mvn.executable}">
            <arg line="${mvn.args} '${mvn.path}mvn ${mvn.defs} ${p_goals}'" />
        </exec>
    </target>    
    
    <target name="init">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <mkdir dir="${package.targetdir}"/>
    </target>
    <target name="clean">
        <delete dir="${package.targetdir}"/>
    </target>

    <target depends="clean,init" name="create-archetype-project-jsp">
        <create-archetype-project project-name="gocwebtemplate-sample-jsp" />
    </target>
	<target depends="clean,init" name="create-archetype-project-spring">
        <create-archetype-project project-name="gocwebtemplate-sample-spring" />
    </target>
    <target depends="create-archetype-project-jsp,create-archetype-project-spring" name="create-archetype-projects">
    </target>
    
    <target depends="create-archetype-project-jsp" name="maven-package-jsp">
        <antcall target="run-mvn-goals">
            <param name="p_exec_basedir" value="${basedir}/${package.targetdir}/gocwebtemplate-sample-jsp-archetype" />
            <param name="p_goals" value="clean package" />
        </antcall>
    </target>
    <target depends="create-archetype-project-spring" name="maven-package-spring">
        <antcall target="run-mvn-goals">
            <param name="p_exec_basedir" value="${basedir}/${package.targetdir}/gocwebtemplate-sample-spring-archetype" />
            <param name="p_goals" value="clean package" />
        </antcall>
    </target>  
    <target depends="maven-package-jsp,maven-package-spring" name="maven-packages">
    </target>

    <target depends="create-archetype-project-jsp" name="maven-install-jsp">
        <antcall target="run-mvn-goals">
            <param name="p_exec_basedir" value="${basedir}/${package.targetdir}/gocwebtemplate-sample-jsp-archetype" />
            <param name="p_goals" value="clean install" />
        </antcall>
    </target>
    <target depends="create-archetype-project-spring" name="maven-install-spring">
        <antcall target="run-mvn-goals">
            <param name="p_exec_basedir" value="${basedir}/${package.targetdir}/gocwebtemplate-sample-spring-archetype" />
            <param name="p_goals" value="clean install" />
        </antcall>
    </target> 	
    <target depends="maven-install-jsp,maven-install-spring" name="maven-installs">
    </target>

    <target depends="create-archetype-project-jsp" name="maven-deploy-jsp">
        <antcall target="run-mvn-goals">
            <param name="p_exec_basedir" value="${basedir}/${package.targetdir}/gocwebtemplate-sample-jsp-archetype" />
            <param name="p_goals" value="clean package" />
        </antcall>
    </target>
    <target depends="create-archetype-project-spring" name="maven-deploy-spring">
        <antcall target="run-mvn-goals">
            <param name="p_exec_basedir" value="${basedir}/${package.targetdir}/gocwebtemplate-sample-spring-archetype" />
            <param name="p_goals" value="clean package" />
        </antcall>
    </target>  
    <target depends="maven-deploy-jsp,maven-deploy-spring" name="maven-deploys">
    </target>
    
</project>
